name: Release - Version & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version:
    name: Update Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_changed: ${{ steps.version.outputs.version_changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump type
        id: bump_type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            # Auto-detect from commit messages
            COMMITS=$(git log --format=%B -n 10)
            if echo "$COMMITS" | grep -qiE '^BREAKING CHANGE:|^feat!:|^fix!:'; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -qiE '^feat:'; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump type: $BUMP_TYPE"

      - name: Bump version
        id: version
        run: |
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"

          # Bump version
          npm version $BUMP_TYPE --no-git-tag-version

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Check if version changed
          if [[ "$NEW_VERSION" != "${{ steps.current_version.outputs.current_version }}" ]]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Version bumped to: $NEW_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $NEW_VERSION"
          fi

      - name: Commit version bump
        if: steps.version.outputs.version_changed == 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Create GitHub Release
        if: steps.version.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.version.outputs.new_version }}"
          release_name: "Release v${{ steps.version.outputs.new_version }}"
          body: |
            ## Changes in v${{ steps.version.outputs.new_version }}

            Automated release created by GitHub Actions.

            ### Docker Image
            ```
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/project-manager:${{ steps.version.outputs.new_version }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/project-manager:latest
            ```
          draft: false
          prerelease: false

  docker:
    name: Build & Push Docker Image
    needs: version
    if: needs.version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/project-manager
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.version.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.version.outputs.new_version }}
            type=semver,pattern={{major}},value=v${{ needs.version.outputs.new_version }}
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-manager:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-manager:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/project-manager
          short-description: "Project Manager API - NestJS with fractal task system"
          readme-filepath: ./README.md
