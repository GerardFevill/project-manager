import {
  Entity,
  Column,
  PrimaryGeneratedColumn,
  CreateDateColumn,
  UpdateDateColumn,
  ManyToOne,
  OneToMany,
  JoinColumn,
  Index,
} from 'typeorm';
import { TaskStatus } from '../enums/task-status.enum';
import { TaskRecurrence } from '../enums/task-recurrence.enum';
import { TaskHistory } from './task-history.entity';

/**
 * üåÄ ENTIT√â TASK - SYST√àME FRACTAL AVANC√â
 *
 * Syst√®me de gestion de t√¢ches hi√©rarchiques avec:
 * ‚úÖ Structure fractale illimit√©e (parent-enfant)
 * ‚úÖ Gestion avanc√©e des statuts et progression
 * ‚úÖ Syst√®me de r√©currence automatique
 * ‚úÖ Historique complet des actions (audit trail)
 * ‚úÖ Tags et m√©tadonn√©es flexibles
 * ‚úÖ Calculs automatiques (overdue, completion, etc.)
 */
@Entity('tasks')
@Index(['status', 'priority']) // Index composite pour les requ√™tes fr√©quentes
@Index(['parentId']) // Index pour les requ√™tes hi√©rarchiques
@Index(['nextOccurrence']) // Index pour le traitement des r√©currences
export class Task {
  // === IDENTIT√â ===

  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ length: 255 })
  title: string;

  @Column({ type: 'text', nullable: true })
  description: string;

  // === STATUT & PROGRESSION ===

  /**
   * Statut actuel de la t√¢che
   * G√®re le cycle de vie complet: draft ‚Üí active ‚Üí completed/archived
   */
  @Column({
    type: 'enum',
    enum: TaskStatus,
    default: TaskStatus.DRAFT,
  })
  status: TaskStatus;

  /**
   * Progression de 0 √† 100%
   * Calcul√©e automatiquement pour les t√¢ches parentes (moyenne des enfants)
   */
  @Column({ type: 'int', default: 0 })
  progress: number;

  /**
   * Priorit√© de la t√¢che
   */
  @Column({
    type: 'enum',
    enum: ['low', 'medium', 'high', 'urgent'],
    default: 'medium',
  })
  priority: 'low' | 'medium' | 'high' | 'urgent';

  // === DATES & √âCH√âANCES ===

  /**
   * Date d'√©ch√©ance (deadline)
   */
  @Column({ type: 'timestamp', nullable: true })
  dueDate: Date;

  /**
   * Date de d√©but planifi√©e
   */
  @Column({ type: 'timestamp', nullable: true })
  startDate: Date;

  /**
   * Date de compl√©tion effective
   */
  @Column({ type: 'timestamp', nullable: true })
  completedAt: Date;

  // === R√âCURRENCE ===

  /**
   * Type de r√©currence (none, daily, weekly, monthly, yearly)
   */
  @Column({
    type: 'enum',
    enum: TaskRecurrence,
    default: TaskRecurrence.NONE,
  })
  recurrence: TaskRecurrence;

  /**
   * Prochaine occurrence pour les t√¢ches r√©currentes
   * Calcul√©e automatiquement selon la fr√©quence
   */
  @Column({ type: 'timestamp', nullable: true })
  nextOccurrence: Date;

  /**
   * Date de la derni√®re occurrence trait√©e
   */
  @Column({ type: 'timestamp', nullable: true })
  lastOccurrence: Date;

  // === STRUCTURE FRACTALE ===

  /**
   * Niveau dans la hi√©rarchie
   * 0 = racine (projet), 1 = sous-t√¢che niveau 1, etc.
   */
  @Column({ default: 0 })
  level: number;

  /**
   * ID du parent (null si racine)
   */
  @Column({ type: 'uuid', nullable: true })
  parentId: string;

  /**
   * Relation vers le parent (many-to-one)
   */
  @ManyToOne(() => Task, (task) => task.children, {
    onDelete: 'CASCADE',
    nullable: true,
  })
  @JoinColumn({ name: 'parentId' })
  parent: Task;

  /**
   * Relation vers les enfants (one-to-many)
   */
  @OneToMany(() => Task, (task) => task.parent, {
    cascade: true,
  })
  children: Task[];

  // === TAGS & M√âTADONN√âES ===

  /**
   * Tags pour cat√©gorisation et filtrage
   * Ex: ['urgent', 'backend', 'bug-fix']
   */
  @Column('simple-array', { nullable: true })
  tags: string[];

  /**
   * M√©tadonn√©es flexibles au format JSON
   * Permet d'ajouter des donn√©es custom sans modifier le sch√©ma
   */
  @Column({ type: 'jsonb', nullable: true })
  metadata: Record<string, any>;

  /**
   * Estimation du temps en heures
   */
  @Column({ type: 'float', nullable: true })
  estimatedHours: number;

  /**
   * Temps r√©el pass√© en heures
   */
  @Column({ type: 'float', default: 0 })
  actualHours: number;

  // === AUDIT TRAIL ===

  /**
   * Historique des actions sur cette t√¢che
   */
  @OneToMany(() => TaskHistory, (history) => history.task, {
    cascade: true,
  })
  history: TaskHistory[];

  // === M√âTADONN√âES SYST√àME ===

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  /**
   * Soft delete - marque comme supprim√©e sans supprimer physiquement
   */
  @Column({ type: 'timestamp', nullable: true })
  deletedAt: Date;

  // === M√âTHODES UTILITAIRES ===

  /**
   * V√©rifie si la t√¢che est en retard
   * @returns true si la date d'√©ch√©ance est pass√©e et la t√¢che n'est pas compl√©t√©e
   */
  isOverdue(): boolean {
    if (!this.dueDate || this.status === TaskStatus.COMPLETED) {
      return false;
    }
    return new Date(this.dueDate) < new Date();
  }

  /**
   * V√©rifie si c'est une t√¢che racine (niveau 0)
   */
  isRoot(): boolean {
    return this.parentId === null && this.level === 0;
  }

  /**
   * V√©rifie si la t√¢che est r√©currente
   */
  isRecurring(): boolean {
    return this.recurrence !== TaskRecurrence.NONE;
  }

  /**
   * Toggle le statut de compl√©tion
   * Active ‚Üî Completed
   */
  toggleCompletion(): void {
    if (this.status === TaskStatus.COMPLETED) {
      this.status = TaskStatus.ACTIVE;
      this.progress = 0;
      this.completedAt = null;
    } else {
      this.status = TaskStatus.COMPLETED;
      this.progress = 100;
      this.completedAt = new Date();
    }
  }

  /**
   * Calcule et met √† jour la prochaine occurrence selon la r√©currence
   * Utilis√© par le syst√®me de t√¢ches r√©currentes
   */
  moveToNextOccurrence(): void {
    if (this.recurrence === TaskRecurrence.NONE) {
      return;
    }

    const baseDate = this.nextOccurrence || this.dueDate || new Date();
    let nextDate = new Date(baseDate);

    switch (this.recurrence) {
      case TaskRecurrence.DAILY:
        nextDate.setDate(nextDate.getDate() + 1);
        break;

      case TaskRecurrence.WEEKLY:
        nextDate.setDate(nextDate.getDate() + 7);
        break;

      case TaskRecurrence.MONTHLY:
        nextDate.setMonth(nextDate.getMonth() + 1);
        break;

      case TaskRecurrence.YEARLY:
        nextDate.setFullYear(nextDate.getFullYear() + 1);
        break;
    }

    this.lastOccurrence = this.nextOccurrence || new Date();
    this.nextOccurrence = nextDate;

    // Si la t√¢che √©tait compl√©t√©e, on la r√©initialise pour la prochaine occurrence
    if (this.status === TaskStatus.COMPLETED) {
      this.status = TaskStatus.RECURRING;
      this.progress = 0;
      this.completedAt = null;
    }
  }

  /**
   * Calcule le taux de compl√©tion bas√© sur les sous-t√¢ches
   * @param children - Les enfants directs de cette t√¢che
   */
  calculateProgressFromChildren(children: Task[]): void {
    if (!children || children.length === 0) {
      return;
    }

    const totalProgress = children.reduce((sum, child) => sum + child.progress, 0);
    this.progress = Math.round(totalProgress / children.length);

    // Si tous les enfants sont √† 100%, marquer le parent comme compl√©t√©
    if (this.progress === 100 && this.status === TaskStatus.ACTIVE) {
      this.status = TaskStatus.COMPLETED;
      this.completedAt = new Date();
    }
  }

  /**
   * Archive la t√¢che (soft delete am√©lior√©)
   */
  archive(): void {
    this.status = TaskStatus.ARCHIVED;
    this.deletedAt = new Date();
  }

  /**
   * Restaure une t√¢che archiv√©e
   */
  unarchive(): void {
    if (this.status === TaskStatus.ARCHIVED) {
      this.status = this.progress === 100 ? TaskStatus.COMPLETED : TaskStatus.ACTIVE;
      this.deletedAt = null;
    }
  }

  /**
   * Bloque la t√¢che avec une raison
   * @param reason - Raison du blocage (stock√©e dans metadata)
   */
  block(reason?: string): void {
    this.status = TaskStatus.BLOCKED;
    if (reason) {
      this.metadata = {
        ...this.metadata,
        blockReason: reason,
        blockedAt: new Date().toISOString(),
      };
    }
  }

  /**
   * D√©bloque la t√¢che
   */
  unblock(): void {
    if (this.status === TaskStatus.BLOCKED) {
      this.status = TaskStatus.ACTIVE;
      if (this.metadata) {
        delete this.metadata.blockReason;
        delete this.metadata.blockedAt;
      }
    }
  }
}
