import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  ParseUUIDPipe,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
} from '@nestjs/swagger';
import { TasksService } from './tasks-enhanced.service';
import { CreateTaskDto } from './dto/create-task-enhanced.dto';
import { UpdateTaskDto } from './dto/update-task-enhanced.dto';
import { TaskFilterDto } from './dto/task-filter-enhanced.dto';
import { BlockTaskDto } from './dto/task-action.dto';

/**
 * üåÄ TASKS CONTROLLER ENHANCED - API REST COMPL√àTE
 *
 * Controller avec tous les endpoints avanc√©s:
 * ‚úÖ CRUD complet
 * ‚úÖ Actions sp√©cialis√©es (block, archive, toggle, etc.)
 * ‚úÖ Navigation hi√©rarchique (children, tree, ancestors)
 * ‚úÖ Analytics & statistiques
 * ‚úÖ Gestion de la r√©currence
 * ‚úÖ Historique et audit trail
 */
@ApiTags('tasks')
@Controller('tasks')
export class TasksController {
  constructor(private readonly tasksService: TasksService) {}

  // ============================================================================
  // CREATE
  // ============================================================================

  @Post()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'Cr√©er une nouvelle t√¢che',
    description: 'Cr√©e une t√¢che avec support complet de la hi√©rarchie et r√©currence',
  })
  @ApiResponse({ status: 201, description: 'T√¢che cr√©√©e avec succ√®s' })
  @ApiResponse({ status: 400, description: 'Donn√©es invalides' })
  create(@Body() createTaskDto: CreateTaskDto) {
    return this.tasksService.create(createTaskDto);
  }

  // ============================================================================
  // READ - Liste et filtres
  // ============================================================================

  @Get()
  @ApiOperation({
    summary: 'R√©cup√©rer toutes les t√¢ches',
    description: 'Supporte 15+ filtres avanc√©s, pagination et tri',
  })
  @ApiResponse({ status: 200, description: 'Liste des t√¢ches' })
  findAll(@Query() filters: TaskFilterDto) {
    return this.tasksService.findAll(filters);
  }

  @Get('stats')
  @ApiOperation({
    summary: 'Statistiques globales',
    description: 'M√©triques compl√®tes: statuts, priorit√©s, taux de compl√©tion, etc.',
  })
  @ApiResponse({ status: 200, description: 'Statistiques' })
  getStats() {
    return this.tasksService.getStatistics();
  }

  @Get('recurring/upcoming')
  @ApiOperation({
    summary: 'Prochaines occurrences de t√¢ches r√©currentes',
    description: 'T√¢ches r√©currentes √† venir dans les N prochains jours',
  })
  @ApiQuery({ name: 'days', required: false, type: Number, example: 7 })
  @ApiResponse({ status: 200, description: 'Liste des t√¢ches √† venir' })
  getUpcomingRecurrences(@Query('days') days: string = '7') {
    return this.tasksService.getUpcomingRecurrences(parseInt(days, 10));
  }

  @Get(':id')
  @ApiOperation({ summary: 'R√©cup√©rer une t√¢che par ID' })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiQuery({
    name: 'includeRelations',
    required: false,
    type: Boolean,
    description: 'Inclure parent, enfants et historique',
  })
  @ApiResponse({ status: 200, description: 'T√¢che trouv√©e' })
  @ApiResponse({ status: 404, description: 'T√¢che non trouv√©e' })
  findOne(
    @Param('id', ParseUUIDPipe) id: string,
    @Query('includeRelations') includeRelations?: string,
  ) {
    return this.tasksService.findOne(id, includeRelations === 'true');
  }

  // ============================================================================
  // READ - Hi√©rarchie
  // ============================================================================

  @Get(':id/children')
  @ApiOperation({
    summary: 'R√©cup√©rer les enfants directs',
    description: 'Sous-t√¢ches de niveau 1 uniquement',
  })
  @ApiParam({ name: 'id', description: 'UUID du parent' })
  @ApiResponse({ status: 200, description: 'Liste des enfants' })
  findChildren(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.findChildren(id);
  }

  @Get(':id/tree')
  @ApiOperation({
    summary: 'R√©cup√©rer l\'arbre complet (r√©cursif)',
    description: 'Tous les descendants √† tous les niveaux',
  })
  @ApiParam({ name: 'id', description: 'UUID de la racine' })
  @ApiResponse({ status: 200, description: 'Arbre complet' })
  findTree(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.findTree(id);
  }

  @Get(':id/ancestors')
  @ApiOperation({
    summary: 'R√©cup√©rer les anc√™tres',
    description: 'Tous les parents jusqu\'√† la racine',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'Liste des anc√™tres' })
  findAncestors(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.findAncestors(id);
  }

  // ============================================================================
  // READ - Analytics & Historique
  // ============================================================================

  @Get(':id/progress')
  @ApiOperation({
    summary: 'Progression d√©taill√©e',
    description: 'M√©triques de progression avec timeline et enfants',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'D√©tails de progression' })
  getTaskProgress(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.getTaskProgress(id);
  }

  @Get(':id/history')
  @ApiOperation({
    summary: 'Historique complet',
    description: 'Audit trail de toutes les actions sur la t√¢che',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'Historique des actions' })
  getTaskHistory(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.getTaskHistory(id);
  }

  // ============================================================================
  // UPDATE - Basique
  // ============================================================================

  @Patch(':id')
  @ApiOperation({
    summary: 'Mettre √† jour une t√¢che',
    description: 'Mise √† jour partielle avec recalcul auto des champs d√©riv√©s',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'T√¢che mise √† jour' })
  @ApiResponse({ status: 400, description: 'Donn√©es invalides' })
  @ApiResponse({ status: 404, description: 'T√¢che non trouv√©e' })
  update(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() updateTaskDto: UpdateTaskDto,
  ) {
    return this.tasksService.update(id, updateTaskDto);
  }

  // ============================================================================
  // UPDATE - Actions sp√©cialis√©es
  // ============================================================================

  @Patch(':id/toggle')
  @ApiOperation({
    summary: 'Toggle compl√©tion',
    description: 'Bascule entre ACTIVE et COMPLETED',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'Statut bascul√©' })
  toggleCompletion(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.toggleCompletion(id);
  }

  @Post(':id/block')
  @ApiOperation({
    summary: 'Bloquer une t√¢che',
    description: 'Passe au statut BLOCKED avec raison optionnelle',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'T√¢che bloqu√©e' })
  blockTask(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() blockDto: BlockTaskDto,
  ) {
    return this.tasksService.blockTask(id, blockDto.reason);
  }

  @Post(':id/convert-to-project')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Convertir une t√¢che en projet',
    description: 'Change le type de la t√¢che en PROJECT (impossible pour les milestones)',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'T√¢che convertie en projet' })
  @ApiResponse({ status: 400, description: 'Impossible de convertir (milestone)' })
  @ApiResponse({ status: 404, description: 'T√¢che non trouv√©e' })
  convertToProject(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.convertToProject(id);
  }

  @Post(':id/unblock')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'D√©bloquer une t√¢che',
    description: 'Passe de BLOCKED √† ACTIVE',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'T√¢che d√©bloqu√©e' })
  unblockTask(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.unblockTask(id);
  }

  @Post(':id/archive')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Archiver une t√¢che',
    description: 'Soft delete - passe au statut ARCHIVED',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'T√¢che archiv√©e' })
  archiveTask(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.archiveTask(id);
  }

  @Post(':id/unarchive')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Restaurer une t√¢che archiv√©e',
    description: 'Restaure le statut pr√©c√©dent',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 200, description: 'T√¢che restaur√©e' })
  unarchiveTask(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.unarchiveTask(id);
  }

  @Post(':id/next-occurrence')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Calculer prochaine occurrence',
    description: 'Pour t√¢ches r√©currentes uniquement',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che r√©currente' })
  @ApiResponse({ status: 200, description: 'Occurrence calcul√©e' })
  @ApiResponse({ status: 400, description: 'T√¢che non r√©currente' })
  moveToNextOccurrence(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.moveToNextOccurrence(id);
  }

  @Post(':id/calculate-progress')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Recalculer progression',
    description: 'Bas√© sur la moyenne des enfants',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che parente' })
  @ApiResponse({ status: 200, description: 'Progression recalcul√©e' })
  calculateProgressFromChildren(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.calculateProgressFromChildren(id);
  }

  // ============================================================================
  // DELETE
  // ============================================================================

  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: 'Supprimer une t√¢che',
    description: 'Hard delete - supprime la t√¢che et tous ses enfants (cascade)',
  })
  @ApiParam({ name: 'id', description: 'UUID de la t√¢che' })
  @ApiResponse({ status: 204, description: 'T√¢che supprim√©e' })
  @ApiResponse({ status: 404, description: 'T√¢che non trouv√©e' })
  remove(@Param('id', ParseUUIDPipe) id: string) {
    return this.tasksService.remove(id);
  }
}
